{{- if $values.configMap.create }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "alloy.fullname" . }}
  labels:
    {{- include "alloy.labels" . | nindent 4 }}
data:
  config.alloy: |
    discovery.kubernetes "nodes" {
      role = "node"
    }

    discovery.kubernetes "services" {
      role = "service"
    }

    discovery.kubernetes "endpoints" {
      role = "endpoints"
    }

    discovery.kubernetes "pods" {
      role = "pod"
    }

    // Processors
    // Annotation Autodiscovery
    discovery.relabel "annotation_autodiscovery_pods" {
      targets = discovery.kubernetes.pods.targets
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_scrape"]
        regex = "true"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_job"]
        action = "replace"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_instance"]
        action = "replace"
        target_label = "instance"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_path"]
        action = "replace"
        target_label = "__metrics_path__"
      }

      // Choose the pod port
      // The discovery generates a target for each declared container port of the pod.
      // If the metricsPortName annotation has value, keep only the target where the port name matches the one of the annotation.
      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        target_label = "__tmp_port"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_portName"]
        regex = "(.+)"
        target_label = "__tmp_port"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        action = "keepequal"
        target_label = "__tmp_port"
      }

      // If the metrics port number annotation has a value, override the target address to use it, regardless whether it is
      // one of the declared ports on that Pod.
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_portNumber", "__meta_kubernetes_pod_ip"]
        regex = "(\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})"
        replacement = "[$2]:$1" // IPv6
        target_label = "__address__"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_portNumber", "__meta_kubernetes_pod_ip"]
        regex = "(\\d+);((([0-9]+?)(\\.|$)){4})" // IPv4, takes priority over IPv6 when both exists
        replacement = "$2:$1"
        target_label = "__address__"
      }

      rule {
        source_labels = ["__meta_kubernetes_pod_annotation_k8s_grafana_com_metrics_scheme"]
        action = "replace"
        target_label = "__scheme__"
      }
    }

    discovery.relabel "annotation_autodiscovery_services" {
      targets = discovery.kubernetes.services.targets
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_scrape"]
        regex = "true"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_job"]
        action = "replace"
        target_label = "job"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_instance"]
        action = "replace"
        target_label = "instance"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_path"]
        action = "replace"
        target_label = "__metrics_path__"
      }

      // Choose the service port
      rule {
        source_labels = ["__meta_kubernetes_service_port_name"]
        target_label = "__tmp_port"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_portName"]
        regex = "(.+)"
        target_label = "__tmp_port"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_port_name"]
        action = "keepequal"
        target_label = "__tmp_port"
      }

      rule {
        source_labels = ["__meta_kubernetes_service_port_number"]
        target_label = "__tmp_port"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_portNumber"]
        regex = "(.+)"
        target_label = "__tmp_port"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_port_number"]
        action = "keepequal"
        target_label = "__tmp_port"
      }

      rule {
        source_labels = ["__meta_kubernetes_service_annotation_k8s_grafana_com_metrics_scheme"]
        action = "replace"
        target_label = "__scheme__"
      }
    }

    discovery.relabel "annotation_autodiscovery_http" {
      targets = concat(discovery.relabel.annotation_autodiscovery_pods.output, discovery.relabel.annotation_autodiscovery_services.output)
      rule {
        source_labels = ["__scheme__"]
        regex = "https"
        action = "drop"
      }
    }

    discovery.relabel "annotation_autodiscovery_https" {
      targets = concat(discovery.relabel.annotation_autodiscovery_pods.output, discovery.relabel.annotation_autodiscovery_services.output)
      rule {
        source_labels = ["__scheme__"]
        regex = "https"
        action = "keep"
      }
    }

    prometheus.scrape "annotation_autodiscovery_http" {
      targets = discovery.relabel.annotation_autodiscovery_http.output
      honor_labels = true
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.annotation_autodiscovery.receiver]
    }

    prometheus.scrape "annotation_autodiscovery_https" {
      targets = discovery.relabel.annotation_autodiscovery_https.output
      honor_labels = true
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.annotation_autodiscovery.receiver]
    }

    prometheus.relabel "annotation_autodiscovery" {
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // Grafana Alloy
    discovery.relabel "alloy" {
      targets = discovery.kubernetes.pods.targets
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
        regex = "monitoring-monitoring"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        regex = "alloy.*"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_port_name"]
        regex = "http-metrics"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_namespace"]
        target_label  = "namespace"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label  = "pod"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_container_name"]
        target_label  = "container"
      }
    }

    prometheus.scrape "alloy" {
      job_name = "integrations/alloy"
      targets = discovery.relabel.alloy.output
      scrape_interval = "60s"
      forward_to = [prometheus.relabel.alloy.receiver]
      clustering {
        enabled = true
      }
    }

    prometheus.relabel "alloy" {
      rule {
        source_labels = ["__name__"]
        regex = "up|alloy_build_info"
        action = "keep"
      }
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // Kubernetes Monitoring Telemetry
    prometheus.exporter.unix "kubernetes_monitoring_telemetry" {
      set_collectors = ["textfile"]
      textfile {
        directory = "/etc/kubernetes-monitoring-telemetry"
      }
    }

    prometheus.scrape "kubernetes_monitoring_telemetry" {
      job_name   = "integrations/kubernetes/kubernetes_monitoring_telemetry"
      targets    = prometheus.exporter.unix.kubernetes_monitoring_telemetry.targets
      scrape_interval = "60s"
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.kubernetes_monitoring_telemetry.receiver]
    }

    prometheus.relabel "kubernetes_monitoring_telemetry" {
      rule {
        target_label = "job"
        action = "replace"
        replacement = "integrations/kubernetes/kubernetes_monitoring_telemetry"
      }
      rule {
        target_label = "instance"
        action = "replace"
        replacement = "monitoring-monitoring"
      }
      rule {
        source_labels = ["__name__"]
        regex = "up|grafana_kubernetes_monitoring_.*"
        action = "keep"
      }
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // Kubelet
    discovery.relabel "kubelet" {
      targets = discovery.kubernetes.nodes.targets
    }

    prometheus.scrape "kubelet" {
      job_name   = "integrations/kubernetes/kubelet"
      targets  = discovery.relabel.kubelet.output
      scheme   = "https"
      scrape_interval = "60s"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.kubelet.receiver]
    }

    prometheus.relabel "kubelet" {
      rule {
        source_labels = ["__name__"]
        regex = "up|container_cpu_usage_seconds_total|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_used|kubernetes_build_info|namespace_workload_pod|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes"
        action = "keep"
      }
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // cAdvisor
    discovery.relabel "cadvisor" {
      targets = discovery.kubernetes.nodes.targets
      rule {
        replacement   = "/metrics/cadvisor"
        target_label  = "__metrics_path__"
      }
    }

    prometheus.scrape "cadvisor" {
      job_name   = "integrations/kubernetes/cadvisor"
      targets    = discovery.relabel.cadvisor.output
      scheme     = "https"
      scrape_interval = "60s"
      bearer_token_file = "/var/run/secrets/kubernetes.io/serviceaccount/token"
      tls_config {
        insecure_skip_verify = true
      }
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.cadvisor.receiver]
    }

    prometheus.relabel "cadvisor" {
      rule {
        source_labels = ["__name__"]
        regex = "up|container_cpu_cfs_periods_total|container_cpu_cfs_throttled_periods_total|container_cpu_usage_seconds_total|container_fs_reads_bytes_total|container_fs_reads_total|container_fs_writes_bytes_total|container_fs_writes_total|container_memory_cache|container_memory_rss|container_memory_swap|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_receive_packets_dropped_total|container_network_receive_packets_total|container_network_transmit_bytes_total|container_network_transmit_packets_dropped_total|container_network_transmit_packets_total|machine_memory_bytes"
        action = "keep"
      }
      // Drop empty container labels, addressing https://github.com/google/cadvisor/issues/2688
      rule {
        source_labels = ["__name__","container"]
        separator = "@"
        regex = "(container_cpu_.*|container_fs_.*|container_memory_.*)@"
        action = "drop"
      }
      // Drop empty image labels, addressing https://github.com/google/cadvisor/issues/2688
      rule {
        source_labels = ["__name__","image"]
        separator = "@"
        regex = "(container_cpu_.*|container_fs_.*|container_memory_.*|container_network_.*)@"
        action = "drop"
      }
      // Normalizing unimportant labels (not deleting to continue satisfying <label>!="" checks)
      rule {
        source_labels = ["__name__", "boot_id"]
        separator = "@"
        regex = "machine_memory_bytes@.*"
        target_label = "boot_id"
        replacement = "NA"
      }
      rule {
        source_labels = ["__name__", "system_uuid"]
        separator = "@"
        regex = "machine_memory_bytes@.*"
        target_label = "system_uuid"
        replacement = "NA"
      }
      // Filter out non-physical devices/interfaces
      rule {
        source_labels = ["__name__", "device"]
        separator = "@"
        regex = "container_fs_.*@(/dev/)?(mmcblk.p.+|nvme.+|rbd.+|sd.+|vd.+|xvd.+|dasd.+)"
        target_label = "__keepme"
        replacement = "1"
      }
      rule {
        source_labels = ["__name__", "__keepme"]
        separator = "@"
        regex = "container_fs_.*@"
        action = "drop"
      }
      rule {
        source_labels = ["__name__"]
        regex = "container_fs_.*"
        target_label = "__keepme"
        replacement = ""
      }
      rule {
        source_labels = ["__name__", "interface"]
        separator = "@"
        regex = "container_network_.*@(en[ospx][0-9].*|wlan[0-9].*|eth[0-9].*)"
        target_label = "__keepme"
        replacement = "1"
      }
      rule {
        source_labels = ["__name__", "__keepme"]
        separator = "@"
        regex = "container_network_.*@"
        action = "drop"
      }
      rule {
        source_labels = ["__name__"]
        regex = "container_network_.*"
        target_label = "__keepme"
        replacement = ""
      }
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // Kube State Metrics
    discovery.relabel "kube_state_metrics" {
      targets = discovery.kubernetes.services.targets
      rule {
        source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
        regex = "monitoring-monitoring"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_name"]
        regex = "kube-state-metrics"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_service_port_name"]
        regex = "http"
        action = "keep"
      }
    }

    prometheus.scrape "kube_state_metrics" {
      job_name   = "integrations/kubernetes/kube-state-metrics"
      targets    = discovery.relabel.kube_state_metrics.output
      scrape_interval = "60s"
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.kube_state_metrics.receiver]
    }

    prometheus.relabel "kube_state_metrics" {
      rule {
        source_labels = ["__name__"]
        regex = "up|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_statefulset.*"
        action = "keep"
      }
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // Node Exporter
    discovery.relabel "node_exporter" {
      targets = discovery.kubernetes.pods.targets
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_instance"]
        regex = "monitoring-monitoring"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
        regex = "prometheus-node-exporter.*"
        action = "keep"
      }
      rule {
        source_labels = ["__meta_kubernetes_pod_node_name"]
        action = "replace"
        target_label = "instance"
      }
    }

    prometheus.scrape "node_exporter" {
      job_name   = "integrations/node_exporter"
      targets  = discovery.relabel.node_exporter.output
      scrape_interval = "60s"
      clustering {
        enabled = true
      }
      forward_to = [prometheus.relabel.node_exporter.receiver]
    }

    prometheus.relabel "node_exporter" {
      rule {
        source_labels = ["__name__"]
        regex = "up|node_cpu.*|node_exporter_build_info|node_filesystem.*|node_memory.*|process_cpu_seconds_total|process_resident_memory_bytes"
        action = "keep"
      }
      // Drop metrics for certain file systems
      rule {
        source_labels = ["__name__", "fstype"]
        separator = "@"
        regex = "node_filesystem.*@(tempfs)"
        action = "drop"
      }
      forward_to = [prometheus.relabel.metrics_service.receiver]
    }

    // Metrics Service
    remote.kubernetes.secret "metrics_service" {
      name = "prometheus-k8s-monitoring"
      namespace = "monitoring"
    }

    prometheus.relabel "metrics_service" {
      rule {
        source_labels = ["cluster"]
        regex = ""
        replacement = "{{ .Values.clusterName }}"
        target_label = "cluster"
      }
      forward_to = [prometheus.remote_write.metrics_service.receiver]
    }

    prometheus.remote_write "metrics_service" {
      endpoint {
        url = nonsensitive(remote.kubernetes.secret.metrics_service.data["host"]) + "/api/prom/push"
        headers = { "X-Scope-OrgID" = nonsensitive(remote.kubernetes.secret.metrics_service.data["tenantId"]) }

        basic_auth {
          username = nonsensitive(remote.kubernetes.secret.metrics_service.data["username"])
          password = remote.kubernetes.secret.metrics_service.data["password"]
        }

        send_native_histograms = false
      }

      wal {
        truncate_frequency = "2h"
        min_keepalive_time = "5m"
        max_keepalive_time = "8h"
      }

      external_labels = {
      }
    }
{{- end }}
